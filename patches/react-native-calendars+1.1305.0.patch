diff --git a/node_modules/react-native-calendars/src/calendar-list/index.js b/node_modules/react-native-calendars/src/calendar-list/index.js
index e0449bc..1760d8b 100644
--- a/node_modules/react-native-calendars/src/calendar-list/index.js
+++ b/node_modules/react-native-calendars/src/calendar-list/index.js
@@ -44,159 +44,202 @@ const CalendarList = (props, ref) => {
     horizontal = false, pagingEnabled, scrollEnabled = true, nestedScrollEnabled = true, scrollsToTop = false, keyExtractor = (_, index) => String(index), keyboardShouldPersistTaps, onScrollBeginDrag, onScrollEndDrag, onMomentumScrollBegin, onMomentumScrollEnd, 
     /** FlatList props */
     onEndReachedThreshold, onEndReached } = props;
-    const calendarProps = extractCalendarProps(props);
-    const headerProps = extractHeaderProps(props);
-    const calendarSize = horizontal ? calendarWidth : calendarHeight;
-    const [currentMonth, setCurrentMonth] = useState(parseDate(current));
-    const shouldUseAndroidRTLFix = useMemo(() => constants.isAndroidRTL && horizontal, [horizontal]);
-    const style = useRef(styleConstructor(theme));
-    const list = useRef();
-    const range = useRef(horizontal ? 1 : 3);
-    const initialDate = useRef(parseDate(current) || new XDate());
-    const visibleMonth = useRef(currentMonth);
-    const items = useMemo(() => {
-        const months = [];
-        for (let i = 0; i <= pastScrollRange + futureScrollRange; i++) {
-            const rangeDate = initialDate.current?.clone().addMonths(i - pastScrollRange, true);
-            months.push(rangeDate);
+     const calendarProps = useMemo(() => extractCalendarProps(props), [props]);
+  const headerProps = useMemo(() => extractHeaderProps(props), [props]);
+  const calendarSize = horizontal ? calendarWidth : calendarHeight;
+
+  const [currentMonth, setCurrentMonth] = useState(parseDate(current));
+  const shouldUseAndroidRTLFix = useMemo(() => constants.isAndroidRTL && horizontal, [horizontal]);
+
+  const style = useRef(styleConstructor(theme));
+  const list = useRef();
+  const range = useRef(horizontal ? 1 : 3);
+  const initialDate = useRef(parseDate(current) || new XDate());
+  const visibleMonth = useRef(currentMonth);
+
+  const items = useMemo(() => {
+    const months = [];
+    for (let i = 0; i <= pastScrollRange + futureScrollRange; i++) {
+      const rangeDate = initialDate.current?.clone().addMonths(i - pastScrollRange, true);
+      months.push(rangeDate);
+    }
+    return months;
+  }, [pastScrollRange, futureScrollRange]);
+
+  const staticHeaderStyle = useMemo(() => [style.current.staticHeader, headerStyle], [headerStyle]);
+  const listStyle = useMemo(() => [style.current.container, propsStyle], [propsStyle]);
+
+  const initialDateIndex = useMemo(() => findIndex(items, item => item.toString() === initialDate.current?.toString()), [items]);
+
+  const getDateIndex = useCallback((date) => findIndex(items, item => item.toString() === date.toString()), [items]);
+
+  useEffect(() => {
+    if (current) {
+      scrollToMonth(new XDate(current));
+    }
+  }, [current]);
+
+  useDidUpdate(() => {
+    const currMont = currentMonth?.clone();
+    if (currMont) {
+      const data = xdateToData(currMont);
+      onMonthChange?.(data);
+      onVisibleMonthsChange?.([data]);
+    }
+  }, [currentMonth]);
+
+  const scrollToDay = useCallback((date, offset, animated) => {
+    const scrollTo = parseDate(date);
+    const diffMonths = Math.round(initialDate?.current?.clone().setDate(1).diffMonths(scrollTo?.clone().setDate(1)));
+    let scrollAmount = calendarSize * pastScrollRange + diffMonths * calendarSize + (offset || 0);
+    if (!horizontal) {
+      let week = 0;
+      const days = page(scrollTo, firstDay);
+      for (let i = 0; i < days.length; i++) {
+        week = Math.floor(i / 7);
+        if (sameDate(days[i], scrollTo)) {
+          scrollAmount += 46 * week;
+          break;
         }
-        return months;
-    }, [pastScrollRange, futureScrollRange]);
-    const staticHeaderStyle = useMemo(() => {
-        return [style.current.staticHeader, headerStyle];
-    }, [headerStyle]);
-    const listStyle = useMemo(() => {
-        return [style.current.container, propsStyle];
-    }, [propsStyle]);
-    const initialDateIndex = useMemo(() => {
-        return findIndex(items, function (item) {
-            return item.toString() === initialDate.current?.toString();
-        });
-    }, [items]);
-    const getDateIndex = useCallback((date) => {
-        return findIndex(items, function (item) {
-            return item.toString() === date.toString();
-        });
-    }, [items]);
-    useEffect(() => {
-        if (current) {
-            scrollToMonth(new XDate(current));
+      }
+    }
+    if (scrollAmount !== 0) {
+      list?.current?.scrollToOffset({ offset: scrollAmount, animated });
+    }
+  }, [calendarSize, pastScrollRange, horizontal, firstDay]);
+
+  const scrollToMonth = useCallback((date) => {
+    const scrollTo = parseDate(date);
+    const diffMonths = Math.round(initialDate?.current?.clone().setDate(1).diffMonths(scrollTo?.clone().setDate(1)));
+    const scrollAmount = calendarSize * (shouldUseAndroidRTLFix ? pastScrollRange - diffMonths : pastScrollRange + diffMonths);
+    if (scrollAmount !== 0) {
+      list?.current?.scrollToOffset({ offset: scrollAmount, animated: animateScroll });
+    }
+  }, [calendarSize, shouldUseAndroidRTLFix, pastScrollRange, animateScroll]);
+
+  const addMonth = useCallback((count) => {
+    const day = currentMonth?.clone().addMonths(count, true);
+    if (sameMonth(day, currentMonth) || getDateIndex(day) === -1) {
+      return;
+    }
+    scrollToMonth(day);
+    setCurrentMonth(day);
+  }, [currentMonth, scrollToMonth, getDateIndex]);
+
+  const getMarkedDatesForItem = useCallback((item) => {
+    if (markedDates && item) {
+      for (const [key] of Object.entries(markedDates)) {
+        if (sameMonth(new XDate(key), new XDate(item))) {
+          return markedDates;
         }
-    }, [current]);
-    useDidUpdate(() => {
-        const currMont = currentMonth?.clone();
-        if (currMont) {
-            const data = xdateToData(currMont);
-            onMonthChange?.(data);
-            onVisibleMonthsChange?.([data]);
-        }
-    }, [currentMonth]);
-    const scrollToDay = (date, offset, animated) => {
-        const scrollTo = parseDate(date);
-        const diffMonths = Math.round(initialDate?.current?.clone().setDate(1).diffMonths(scrollTo?.clone().setDate(1)));
-        let scrollAmount = calendarSize * pastScrollRange + diffMonths * calendarSize + (offset || 0);
-        if (!horizontal) {
-            let week = 0;
-            const days = page(scrollTo, firstDay);
-            for (let i = 0; i < days.length; i++) {
-                week = Math.floor(i / 7);
-                if (sameDate(days[i], scrollTo)) {
-                    scrollAmount += 46 * week;
-                    break;
-                }
-            }
-        }
-        if (scrollAmount !== 0) {
-            // @ts-expect-error
-            list?.current?.scrollToOffset({ offset: scrollAmount, animated });
-        }
-    };
-    const scrollToMonth = useCallback((date) => {
-        const scrollTo = parseDate(date);
-        const diffMonths = Math.round(initialDate?.current?.clone().setDate(1).diffMonths(scrollTo?.clone().setDate(1)));
-        const scrollAmount = calendarSize * (shouldUseAndroidRTLFix ? pastScrollRange - diffMonths : pastScrollRange + diffMonths);
-        if (scrollAmount !== 0) {
-            // @ts-expect-error
-            list?.current?.scrollToOffset({ offset: scrollAmount, animated: animateScroll });
-        }
-    }, [calendarSize, shouldUseAndroidRTLFix, pastScrollRange, animateScroll]);
-    const addMonth = useCallback((count) => {
-        const day = currentMonth?.clone().addMonths(count, true);
-        if (sameMonth(day, currentMonth) || getDateIndex(day) === -1) {
-            return;
-        }
-        scrollToMonth(day);
-        setCurrentMonth(day);
-    }, [currentMonth, scrollToMonth]);
-    const getMarkedDatesForItem = useCallback((item) => {
-        if (markedDates && item) {
-            for (const [key, _] of Object.entries(markedDates)) {
-                if (sameMonth(new XDate(key), new XDate(item))) {
-                    return markedDates;
-                }
-            }
-        }
-    }, [markedDates]);
-    const getItemLayout = useCallback((_, index) => {
-        return {
-            length: calendarSize,
-            offset: calendarSize * index,
-            index
-        };
-    }, []);
-    const isDateInRange = useCallback((date) => {
-        for (let i = -range.current; i <= range.current; i++) {
-            const newMonth = currentMonth?.clone().addMonths(i, true);
-            if (sameMonth(date, newMonth)) {
-                return true;
-            }
-        }
-        return false;
-    }, [currentMonth]);
-    const renderItem = useCallback(({ item }) => {
-        const dateString = toMarkingFormat(item);
-        const [year, month] = dateString.split('-');
-        const testId = `${testID}.item_${year}-${month}`;
-        return (<CalendarListItem {...calendarProps} testID={testId} markedDates={getMarkedDatesForItem(item)} item={item} style={calendarStyle} 
-        // @ts-expect-error - type mismatch - ScrollView's 'horizontal' is nullable
-        horizontal={horizontal} calendarWidth={calendarWidth} calendarHeight={calendarHeight} scrollToMonth={scrollToMonth} visible={isDateInRange(item)}/>);
-    }, [horizontal, calendarStyle, calendarWidth, testID, getMarkedDatesForItem, isDateInRange, calendarProps]);
-    const renderStaticHeader = () => {
-        if (staticHeader && horizontal) {
-            return (<CalendarHeader {...headerProps} testID={`${testID}.staticHeader`} style={staticHeaderStyle} month={currentMonth} addMonth={addMonth} accessibilityElementsHidden={true} // iOS
-             importantForAccessibility={'no-hide-descendants'} // Android
-            />);
-        }
-    };
-    /** Viewable month */
-    const viewabilityConfig = useRef({
-        viewAreaCoveragePercentThreshold: 20
-    });
-    const onViewableItemsChanged = useCallback(({ viewableItems }) => {
-        const newVisibleMonth = parseDate(viewableItems[0]?.item);
-        if (shouldUseAndroidRTLFix) {
-            const centerIndex = items.findIndex((item) => isEqual(parseDate(current), item));
-            const adjustedOffset = centerIndex - items.findIndex((item) => isEqual(newVisibleMonth, item));
-            visibleMonth.current = items[centerIndex + adjustedOffset];
-            setCurrentMonth(visibleMonth.current);
-        }
-        else {
-            if (!sameDate(visibleMonth?.current, newVisibleMonth)) {
-                visibleMonth.current = newVisibleMonth;
-                setCurrentMonth(visibleMonth.current);
-            }
-        }
-    }, [items, shouldUseAndroidRTLFix, current]);
-    const viewabilityConfigCallbackPairs = useRef([
-        {
-            viewabilityConfig: viewabilityConfig.current,
-            onViewableItemsChanged
-        },
-    ]);
+      }
+    }
+  }, [markedDates]);
+
+  const getItemLayout = useCallback((_, index) => ({
+    length: calendarSize,
+    offset: calendarSize * index,
+    index
+  }), [calendarSize]);
+
+  const isDateInRange = useCallback((date) => {
+    for (let i = -range.current; i <= range.current; i++) {
+      const newMonth = currentMonth?.clone().addMonths(i, true);
+      if (sameMonth(date, newMonth)) {
+        return true;
+      }
+    }
+    return false;
+  }, [currentMonth]);
+
+  const renderItem = useCallback(({ item }) => {
+    const dateString = toMarkingFormat(item);
+    const [year, month] = dateString.split('-');
+    const testId = `${testID}.item_${year}-${month}`;
+    return (
+      <CalendarListItem
+        {...calendarProps}
+        testID={testId}
+        markedDates={getMarkedDatesForItem(item)}
+        item={item}
+        style={calendarStyle}
+        horizontal={horizontal}
+        calendarWidth={calendarWidth}
+        calendarHeight={calendarHeight}
+        scrollToMonth={scrollToMonth}
+        visible={isDateInRange(item)}
+      />
+    );
+  }, [horizontal, calendarStyle, calendarWidth, testID, getMarkedDatesForItem, isDateInRange, calendarProps, calendarHeight, scrollToMonth]);
+
+  const renderStaticHeader = useCallback(() => {
+    if (staticHeader && horizontal) {
+      return (
+        <CalendarHeader
+          {...headerProps}
+          testID={`${testID}.staticHeader`}
+          style={staticHeaderStyle}
+          month={currentMonth}
+          addMonth={addMonth}
+          accessibilityElementsHidden={true}
+          importantForAccessibility={'no-hide-descendants'}
+        />
+      );
+    }
+  }, [staticHeader, horizontal, headerProps, testID, staticHeaderStyle, currentMonth, addMonth]);
+
+  const viewabilityConfig = useRef({ viewAreaCoveragePercentThreshold: 20 });
+
+  const onViewableItemsChanged = useCallback(({ viewableItems }) => {
+    const newVisibleMonth = parseDate(viewableItems[0]?.item);
+    if (shouldUseAndroidRTLFix) {
+      const centerIndex = items.findIndex((item) => isEqual(parseDate(current), item));
+      const adjustedOffset = centerIndex - items.findIndex((item) => isEqual(newVisibleMonth, item));
+      visibleMonth.current = items[centerIndex + adjustedOffset];
+      setCurrentMonth(visibleMonth.current);
+    } else {
+      if (!sameDate(visibleMonth?.current, newVisibleMonth)) {
+        visibleMonth.current = newVisibleMonth;
+        setCurrentMonth(visibleMonth.current);
+      }
+    }
+  }, [items, shouldUseAndroidRTLFix, current]);
+
+  const viewabilityConfigCallbackPairs = useRef([
+    { viewabilityConfig: viewabilityConfig.current, onViewableItemsChanged },
+  ]);
+
     return (<View style={style.current.flatListContainer} testID={testID}>
-      <FlatList 
-    // @ts-expect-error
-    ref={list} windowSize={shouldUseAndroidRTLFix ? pastScrollRange + futureScrollRange + 1 : undefined} style={listStyle} showsVerticalScrollIndicator={showScrollIndicator} showsHorizontalScrollIndicator={showScrollIndicator} data={items} renderItem={renderItem} getItemLayout={getItemLayout} initialNumToRender={range.current} initialScrollIndex={initialDateIndex} viewabilityConfigCallbackPairs={viewabilityConfigCallbackPairs.current} testID={`${testID}.list`} onLayout={onLayout} removeClippedSubviews={removeClippedSubviews} pagingEnabled={pagingEnabled} scrollEnabled={scrollEnabled} scrollsToTop={scrollsToTop} horizontal={horizontal} keyboardShouldPersistTaps={keyboardShouldPersistTaps} keyExtractor={keyExtractor} onEndReachedThreshold={onEndReachedThreshold} onEndReached={onEndReached} nestedScrollEnabled={nestedScrollEnabled} onMomentumScrollBegin={onMomentumScrollBegin} onMomentumScrollEnd={onMomentumScrollEnd} onScrollBeginDrag={onScrollBeginDrag} onScrollEndDrag={onScrollEndDrag}/>
+        <FlatList
+            
+        ref={list}
+        windowSize={shouldUseAndroidRTLFix ? pastScrollRange + futureScrollRange + 1 : undefined}
+        style={listStyle}
+        showsVerticalScrollIndicator={showScrollIndicator}
+        showsHorizontalScrollIndicator={showScrollIndicator}
+        data={items}
+        renderItem={renderItem}
+        getItemLayout={getItemLayout}
+        initialNumToRender={range.current}
+        initialScrollIndex={initialDateIndex}
+        viewabilityConfigCallbackPairs={viewabilityConfigCallbackPairs.current}
+        testID={`${testID}.list`}
+        onLayout={onLayout}
+        removeClippedSubviews={removeClippedSubviews}
+        pagingEnabled={pagingEnabled}
+        scrollEnabled={scrollEnabled}
+        scrollsToTop={scrollsToTop}
+        horizontal={horizontal}
+        keyboardShouldPersistTaps={keyboardShouldPersistTaps}
+        keyExtractor={keyExtractor}
+        onEndReachedThreshold={onEndReachedThreshold}
+        onEndReached={onEndReached}
+        nestedScrollEnabled={nestedScrollEnabled}
+        onMomentumScrollBegin={onMomentumScrollBegin}
+        onMomentumScrollEnd={onMomentumScrollEnd}
+        onScrollBeginDrag={onScrollBeginDrag}
+        onScrollEndDrag={onScrollEndDrag}
+      />
       {renderStaticHeader()}
     </View>);
 };
diff --git a/node_modules/react-native-calendars/src/calendar-list/item.js b/node_modules/react-native-calendars/src/calendar-list/item.js
index 0e5be76..0b0b56e 100644
--- a/node_modules/react-native-calendars/src/calendar-list/item.js
+++ b/node_modules/react-native-calendars/src/calendar-list/item.js
@@ -1,5 +1,5 @@
 import React, { useRef, useMemo, useCallback } from 'react';
-import { Text } from 'react-native';
+import { ActivityIndicator, Text, View } from 'react-native';
 import { toMarkingFormat } from '../interface';
 import { extractCalendarProps } from '../componentUpdater';
 import styleConstructor from './style';
@@ -52,7 +52,7 @@ const CalendarListItem = React.memo((props) => {
         }
     }, [onPressArrowRight, scrollToMonth]);
     if (!visible) {
-        return (<Text style={textStyle}>{dateString}</Text>);
+        return (<Text style={textStyle}>{dateString}     <ActivityIndicator /></Text>);
     }
     return (<Calendar hideArrows={true} hideExtraDays={true} {...calendarProps} current={dateString} style={calendarStyle} headerStyle={horizontal ? headerStyle : undefined} disableMonthChange onPressArrowLeft={horizontal ? _onPressArrowLeft : onPressArrowLeft} onPressArrowRight={horizontal ? _onPressArrowRight : onPressArrowRight}/>);
 });
diff --git a/node_modules/react-native-calendars/src/calendar/index.js b/node_modules/react-native-calendars/src/calendar/index.js
index 6f46e8a..d277676 100644
--- a/node_modules/react-native-calendars/src/calendar/index.js
+++ b/node_modules/react-native-calendars/src/calendar/index.js
@@ -104,7 +104,7 @@ const Calendar = (props) => {
         const dateString = toMarkingFormat(day);
         const isControlled = isEmpty(props.context);
         return (<View style={style.current.dayContainer} key={id}>
-        <Day {...dayProps} testID={`${testID}.day_${dateString}`} date={dateString} state={getState(day, currentMonth, props, isControlled)} marking={markedDates?.[dateString]} onPress={_onDayPress} onLongPress={onLongPressDay}/>
+        <Day {...dayProps} testID={`${testID}.day_${dateString}`} date={dateString} marking={markedDates?.[dateString]} onPress={_onDayPress} onLongPress={onLongPressDay}/>
       </View>);
     };
     const renderWeek = (days, id) => {
diff --git a/node_modules/react-native-calendars/src/day-state-manager.d.ts b/node_modules/react-native-calendars/src/day-state-manager.d.ts
index 7313332..55f3973 100644
--- a/node_modules/react-native-calendars/src/day-state-manager.d.ts
+++ b/node_modules/react-native-calendars/src/day-state-manager.d.ts
@@ -1,2 +1,2 @@
 /// <reference types="xdate" />
-export declare function getState(day: XDate, current: XDate, props: any, disableDaySelection?: boolean): string;
+export declare function getState(day: XDate, current: XDate, props: any, disableDaySelection?: boolean,selectedDay): string;
diff --git a/node_modules/react-native-calendars/src/day-state-manager.js b/node_modules/react-native-calendars/src/day-state-manager.js
index 514e854..8509edc 100644
--- a/node_modules/react-native-calendars/src/day-state-manager.js
+++ b/node_modules/react-native-calendars/src/day-state-manager.js
@@ -1,11 +1,25 @@
 const { isToday, isDateNotInRange, sameMonth } = require('./dateutils');
 const { toMarkingFormat } = require('./interface');
+function convertDateString(dateString) {
+    const date = new Date(dateString);
+    
+    const year = date.getFullYear();
+    const month = String(date.getMonth() + 1).padStart(2, '0');
+    const day = String(date.getDate()).padStart(2, '0');
+    
+    return `${year}-${month}-${day}`;
+}
+
 export function getState(day, current, props, disableDaySelection) {
-    const { minDate, maxDate, disabledByDefault, context } = props;
+    const { minDate, maxDate, disabledByDefault, context, selectedDay } = props;
     let state = '';
-    if (!disableDaySelection && ((context?.date ?? toMarkingFormat(current)) === toMarkingFormat(day))) {
+    if (!disableDaySelection && ((context?.date ?? toMarkingFormat(current)) === toMarkingFormat(day)) &&
+        convertDateString(day) === selectedDay && day.getDay() === 0) {
         state = 'selected';
     }
+    else if (!disableDaySelection && ((context?.date ?? selectedDay) === toMarkingFormat(day)) && day.getDay() !== 0) {
+        state = 'selected';
+        }
     else if (isToday(day)) {
         state = 'today';
     }
diff --git a/node_modules/react-native-calendars/src/expandableCalendar/WeekCalendar/index.js b/node_modules/react-native-calendars/src/expandableCalendar/WeekCalendar/index.js
index c030f84..cbef3ee 100644
--- a/node_modules/react-native-calendars/src/expandableCalendar/WeekCalendar/index.js
+++ b/node_modules/react-native-calendars/src/expandableCalendar/WeekCalendar/index.js
@@ -28,6 +28,7 @@ const WeekCalendar = (props) => {
     const style = useRef(styleConstructor(theme));
     const items = useRef(getDatesArray(current ?? date, firstDay, numberOfDays));
     const [listData, setListData] = useState(items.current);
+    const [selectedDay, setSelectedDay] = useState(date);
     const changedItems = useRef(constants.isRTL);
     const list = useRef(null);
     const currentIndex = useRef(NUMBER_OF_PAGES);
@@ -64,7 +65,8 @@ const WeekCalendar = (props) => {
     const containerWidth = useMemo(() => {
         return calendarWidth ?? constants.screenWidth;
     }, [calendarWidth]);
-    const _onDayPress = useCallback((value) => {
+        const _onDayPress = useCallback((value) => {
+        setSelectedDay(value.dateString)
         if (onDayPress) {
             onDayPress(value);
         }
@@ -88,10 +90,10 @@ const WeekCalendar = (props) => {
     const weekStyle = useMemo(() => {
         return [{ width: containerWidth }, propsStyle];
     }, [containerWidth, propsStyle]);
-    const renderItem = useCallback(({ item }) => {
+     const renderItem = useCallback(({ item }) => {
         const currentContext = sameWeek(date, item, firstDay) ? context : undefined;
         const markings = getCurrentWeekMarkings(item, markedDates);
-        return (<Week {...others} markedDates={markings} current={item} firstDay={firstDay} style={weekStyle} context={currentContext} onDayPress={_onDayPress} numberOfDays={numberOfDays} timelineLeftInset={timelineLeftInset}/>);
+        return (<Week {...others} selectedDay={selectedDay} markedDates={markings} current={item} firstDay={firstDay} style={weekStyle} context={currentContext} onDayPress={_onDayPress} numberOfDays={numberOfDays} timelineLeftInset={timelineLeftInset}/>);
     }, [firstDay, _onDayPress, context, date, markedDates]);
     const keyExtractor = useCallback((item) => item, []);
     const renderWeekDaysNames = useMemo(() => {
diff --git a/node_modules/react-native-calendars/src/expandableCalendar/WeekCalendar/new.js b/node_modules/react-native-calendars/src/expandableCalendar/WeekCalendar/new.js
index b7e3a65..1ef1dd2 100644
--- a/node_modules/react-native-calendars/src/expandableCalendar/WeekCalendar/new.js
+++ b/node_modules/react-native-calendars/src/expandableCalendar/WeekCalendar/new.js
@@ -14,7 +14,7 @@ import { sameWeek } from '../../dateutils';
 const NUMBER_OF_PAGES = 50;
 const DEFAULT_PAGE_HEIGHT = 48;
 const WeekCalendar = (props) => {
-    const { current, firstDay = 0, markedDates, allowShadow = true, hideDayNames, theme, calendarWidth, calendarHeight = DEFAULT_PAGE_HEIGHT, testID } = props;
+    const { current, firstDay = 0, markedDates, allowShadow = true, hideDayNames, theme, calendarWidth, calendarHeight = DEFAULT_PAGE_HEIGHT, testID, disableOnPageChange = false } = props;
     const context = useContext(CalendarContext);
     const { date, updateSource } = context;
     const style = useRef(styleConstructor(theme));
@@ -41,10 +41,10 @@ const WeekCalendar = (props) => {
         props.onDayPress?.(dateData);
     }, [props.onDayPress]);
     const onPageChange = useCallback((pageIndex, _prevPage, { scrolledByUser }) => {
-        if (scrolledByUser) {
+        if (scrolledByUser && !disableOnPageChange) {
             context?.setDate(items[pageIndex], UpdateSources.WEEK_SCROLL);
         }
-    }, [items]);
+    }, [items,disableOnPageChange]);
     const reloadPages = useCallback(pageIndex => {
         const date = items[pageIndex];
         setItems(getDatesArray(date, firstDay, NUMBER_OF_PAGES));
@@ -53,7 +53,7 @@ const WeekCalendar = (props) => {
         const { allowShadow, ...calendarListProps } = props;
         const { /* style,  */ ...others } = extractCalendarProps(calendarListProps);
         const isSameWeek = sameWeek(item, date, firstDay);
-        return (<Week {...others} key={item} current={isSameWeek ? date : item} firstDay={firstDay} style={weekStyle} markedDates={markedDates} onDayPress={onDayPress} context={context}/>);
+        return (<Week {...others} key={item} current={ date } firstDay={firstDay} style={weekStyle} markedDates={markedDates} onDayPress={onDayPress} context={context}/>);
     }, [date, markedDates]);
     return (<View testID={testID} style={[allowShadow && style.current.containerShadow, !hideDayNames && style.current.containerWrapper]}>
       {!hideDayNames && (<View style={[style.current.week, style.current.weekCalendar]}>
diff --git a/node_modules/react-native-calendars/src/expandableCalendar/week.js b/node_modules/react-native-calendars/src/expandableCalendar/week.js
index 2d37a0e..1297024 100644
--- a/node_modules/react-native-calendars/src/expandableCalendar/week.js
+++ b/node_modules/react-native-calendars/src/expandableCalendar/week.js
@@ -14,7 +14,7 @@ function arePropsEqual(prevProps, nextProps) {
     return isEqual(prevContext, nextContext) && isEqual(prevMarkings, nextMarkings) && isEqual(prevOthers, nextOthers);
 }
 const Week = React.memo((props) => {
-    const { theme, current, firstDay, hideExtraDays, markedDates, onDayPress, onDayLongPress, style: propsStyle, numberOfDays = 1, timelineLeftInset, testID, } = props;
+    const { theme, current, firstDay, hideExtraDays, markedDates, onDayPress, onDayLongPress, style: propsStyle, numberOfDays = 1, timelineLeftInset, testID, selectedDay } = props;
     const style = useRef(styleConstructor(theme));
     const disableDaySelection = useMemo(() => {
         return !!numberOfDays && numberOfDays > 1;
@@ -38,7 +38,7 @@ const Week = React.memo((props) => {
         }
         const dayString = toMarkingFormat(day);
         return (<View style={style.current.dayContainer} key={id}>
-        <Day {...dayProps} testID={`${testID}.day_${dayString}`} date={dayString} state={getState(day, currXdate, props, disableDaySelection)} marking={disableDaySelection ? { ...markedDates?.[dayString], disableTouchEvent: true } : markedDates?.[dayString]} onPress={onDayPress} onLongPress={onDayLongPress}/>
+        <Day {...dayProps} testID={`${testID}.day_${dayString}`} date={dayString}  marking={disableDaySelection ? { ...markedDates?.[dayString], disableTouchEvent: true } : markedDates?.[dayString]} onPress={onDayPress} onLongPress={onDayLongPress}/>
       </View>);
     };
     const renderWeek = () => {
